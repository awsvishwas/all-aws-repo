import boto3

def lambda_handler(event, context):
    ec2 = boto3.client('ec2')

    # Get list of regions
    regions = ec2.describe_regions().get('Regions', [])

    # Iterate through regions
    for region in regions:
        reg = region['RegionName']

        # Connect to region
        ec2_region = boto3.client('ec2', region_name=reg)

        # Get all in-use volumesimport boto3

def lambda_handler(event, context):
    ec2 = boto3.client('ec2')

    # Get list of regions
    regions = ec2.describe_regions().get('Regions', [])

    # Iterate through regions
    for region in regions:
        reg = region['RegionName']

        # Connect to region
        ec2_region = boto3.client('ec2', region_name=reg)

        # Get all in-use volumes
        result = ec2_region.describe_volumes(Filters=[{'Name': 'status', 'Values': ['in-use']}])

        # Iterate through volumes and create snapshots
        for volume in result['Volumes']:
            try:
                snapshot_result = ec2_region.create_snapshot(VolumeId=volume['VolumeId'], Description='Created by Lambda backup function')
                print("Created snapshot {} for volume {} in region {}".format(snapshot_result['SnapshotId'], volume['VolumeId'], reg))
            except Exception as e:
                print("Failed to create snapshot for volume {} in region {}: {}".format(volume['VolumeId'], reg, e))

    return {
        'statusCode': 200,
        'body': 'Snapshot creation process completed'
    }


        result = ec2_region.describe_volumes(Filters=[{'Name': 'status', 'Values': ['in-use']}])

        # Iterate through volumes and create snapshots
        for volume in result['Volumes']:
            try:
                snapshot_result = ec2_region.create_snapshot(VolumeId=volume['VolumeId'], Description='Created by Lambda backup function')
                print("Created snapshot {} for volume {} in region {}".format(snapshot_result['SnapshotId'], volume['VolumeId'], reg))
            except Exception as e:
                print("Failed to create snapshot for volume {} in region {}: {}".format(volume['VolumeId'], reg, e))

    return {
        'statusCode': 200,
        'body': 'Snapshot creation process completed'
    }

